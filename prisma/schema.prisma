generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  DC
  PTQ
  UMAR
  IMC
  TAKMIR
  JAMAAH
}

enum ProgramType {
  DAILY
  ANNUALY
}

enum ProgramStatus {
  UPCOMING
  DONE
  CANCELED
}

enum ArticleStatus {
  DRAFT
  ARCHIVED
  PUBLISHED
}

enum ArticleCategory {
  NOT_SET
  PENDIDIKAN
  AKIDAH
  FIQIH
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  bio           String?
  gender        String?

  accounts Account[]
  role     UserRole  @default(JAMAAH)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastLogin DateTime?

  article Article[]
}

model Account {
  id                String @id @default(cuid())
  userId            String @unique
  type              String
  provider          String
  providerAccountId String

  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User? @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model ResetPasswordRequest {
  id    String   @id @default(cuid())
  date  DateTime
  email String
}

model ApiKey {
  id         String    @id @default(cuid())
  name       String
  key        String    @unique
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  isActive   Boolean   @default(true)
  createdBy  String
}

model Program {
  id               String             @id
  title            String
  description      String
  content          String
  image            String
  type             ProgramType
  customeUrl       String?
  programExecution ProgramExecution[]
}

model ProgramExecution {
  id        String        @id @default(cuid())
  title     String
  image     String
  date      DateTime
  status    ProgramStatus
  program   Program       @relation(fields: [programId], references: [id])
  programId String
}

model Article {
  id       String          @id @default(cuid())
  title    String
  slug     String          @unique
  category ArticleCategory @default(NOT_SET)
  content  String
  coverUrl String?
  views    Int             @default(0)
  status   ArticleStatus   @default(DRAFT)
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  // Self-relation fields
  backupId String? // Field to store the ID of the backup article
  backup   Article?  @relation("BackupRelation", fields: [backupId], references: [id])
  original Article[] @relation("BackupRelation") // Field for the original article referencing backups
}
